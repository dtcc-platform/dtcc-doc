variables:
  # https://hub.docker.com/r/alpine/git/tags
  GIT_VERSION: v2.30.1

  COMMIT_MESSAGE: Automatic submodule update triggered
  UPDATE_SUBMODULE: 'false'

stages:
  - update
  - build
  - deploy

## --------------------------------------------------------------------------------------------------------------------
######################################## Trigger on submodule update ##################################################

# Before the build 
# - for each submodule 
#   - Check if there's a new commit 
#   - Pull latest docs automatically into the dtcc-doc 
#   - Push all the updates to remote

## Description
#   This script allows to store the artefacts of a step into the current repository

# Set up this script
#   1. Create a new personal access token (https://gitlab.com/-/profile/personal_access_tokens)
#      with the following scopes:
#        - read_repository
#        - write_repository
#   2. Inside Settings -> CI / CD -> Variables, create the following variables:
#
#   GITLAB_TOKEN          Personal access token previously created.             XGE2-k445hd5fbs94v9d
#     (masked)
#   GITLAB_USERNAME       Username associated with the personal access token.   ranb2002
#   COMMIT_MESSAGE        Commit message                                        Automatic update from the weekly schedule

# Other variables used by this script
#   The following variables are defined automatically by GitLab CI. Thus, you
#   don't need to override them.
#
#   CI_COMMIT_SHA         Commit SHA, to use a unique directory name.           e46f153dd47ce5f3ca8c56be3fb5d55039853655
#   CI_DEFAULT_BRANCH     Default branch.                                       main
#   CI_PROJECT_PATH       Current project path.                                 ranb2002/benjaminrancourt.ca
#   CI_SERVER_HOST        Hostname of the current GitLab instance.              gitlab.com
#   GITLAB_USER_EMAIL     Email of the user used to commit the changes to the   ranb2002@gitlab.com
#                         secondary repository.
#   GITLAB_USER_NAME      User name of the user used to commit the changes to   Benjamin Rancourt
#                         the secondary repository.

.git:push:
  after_script:
    # Go to the new directory
    - cd "${CI_COMMIT_SHA}"

    # Add all generated files to Git
    - git add .

    - |-
      # Check if we have modifications to commit
      CHANGES=$(git status --porcelain | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        # Show the status of files that are about to be created, updated or deleted
        git status

        # Commit all changes
        git commit -m "${COMMIT_MESSAGE}"

        # Update the repository and make sure to skip the pipeline create for this commit
        git push origin "${CI_DEFAULT_BRANCH}" -o ci.skip
      fi
  before_script:
    # Clone the repository via HTTPS inside a new directory
    - git clone "https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "${CI_COMMIT_SHA}"

    # Set the displayed user with the commits that are about to be made
    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"
  image:
    entrypoint: ['']
    name: alpine/git:${GIT_VERSION}
  stage: update


update:submodule:
  extends: .git:push
  rules:
    - if: $UPDATE_SUBMODULE == "true"
      when: never
  script:
    - cd "${CI_COMMIT_SHA}"
    - git submodule update --init --recursive
    - git submodule update --remote
  stage: update

update:builder:
  trigger:
    branch: '${CI_DEFAULT_BRANCH}'
    project: dtcc-platform/dtcc-builder
    strategy: depend
  stage: update
  variables:
    UPDATE_SUBMODULE: 'true'

update:core:
  trigger:
    branch: '${CI_DEFAULT_BRANCH}'
    project: dtcc-platform/dtcc-core
    strategy: depend
  stage: update
  variables:
    UPDATE_SUBMODULE: 'true'

update:model:
  trigger:
    branch: '${CI_DEFAULT_BRANCH}'
    project: dtcc-platform/dtcc-model
    strategy: depend
  stage: update
  variables:
    UPDATE_SUBMODULE: 'true'


# update:submodules:
#   parallel:
#     matrix:
#       - DOWNSTREAM_PROJECT: ["dtcc-platform/dtcc-builder", "dtcc-platform/dtcc-core", 
#                               "dtcc-platform/dtcc-model", "dtcc-platform/dtcc-viewer", 
#                               "dtcc-platform/dtcc-docker"]
#   trigger:
#     branch: '${CI_DEFAULT_BRANCH}'
#     project: $DOWNSTREAM_PROJECT
#     strategy: depend
#   stage: update
#   variables:
#     UPDATE_SUBMODULE: 'true'

# ------------------
#image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
#services:
  #- mysql:latest
  #- redis:latest
  #- postgres:latest

#before_script:
 #- apk update && apk add openssh-client rsync
 #- eval $(ssh-agent -s)
 #- mkdir -p ~/.ssh
 #- echo "Host *\n\tStrictHostKeyChecking no" >> ~/.ssh/config
 #- echo "$SSH_PRIVATE_KEY" > key.pem
 #- echo "$PORTAL_HOST_KEY" > ~/.ssh/known_hosts
 #- echo "$SSH_PRIVATE_KEY"
 #- echo "$SSH_PRIVATE_KEY" | ssh-add -
 #- printenv SSH_PRIVATE_KEY 
 #- cat ~/.ssh/known_hosts
 #- chmod 400 key.pem
 #- chmod +x deploy.sh


# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache
#cache:
#  paths:
#    - node_modules/

build:
  stage: build
  image: node:16-alpine
  script:
    #- sudo apt-get install lftp -y # add extra (outside of registered Docker file) dependencies here
    - sh ./bin/dtcc-build-documentation && cd website && npm install && npm run build
    - pwd 
    - ls
  artifacts:
    paths:
      - website/build/
      #- unittests/



#build:
#  stage: build
#  image: node:16-alpine
#  script:
    #- aws s3 ls s3://$S3_BUCKET
#    - cd website
#    - npm install
    #- node ./specs/start.js ./specs/async.spec.js
#    - ls
#    - pwd
#    - npm run build
    #- #ls
    #- #cd dist
    #- #tar -czvf dist.tar.gz *
    #- #cd ..
    #- #ls 
    #- /bin/sh deploy.sh
    #-oStrictHostKeyChecking=no
#  artifacts:
#    paths:
#      - build/
  #- unittests/
 

deploy:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - ls -alt
    - cd website/build
    - ls -alt
    - aws s3 ls s3://$S3_BUCKET
    - aws s3 sync . s3://$S3_BUCKET
    #- npm install
    #- node ./specs/start.js ./specs/db-postgres.spec.js
variables:
     GIT_SUBMODULE_STRATEGY: normal 


